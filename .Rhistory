###############################################
datos1<-read.table("datos_lista.txt",header=TRUE) #Para abrir el archivo. Header=TRUE
datos1
#xq lo quiero con encabezado. Lo muestra como dataframe
datos<-as.list(read.table("datos_lista.txt",header=TRUE)) #Para forzar q sea lista
datos
corr_BOYA_ErSST<-cor.test(datos$BOYA,datos$ErSST)
corr_BOYA_ErSST
corr_BOYA_HadSST<-cor.test(datos$BOYA,datos$HadSST) #Hace correlacion de pearson
corr_BOYA_HadSST<-cor.test(datos$BOYA,datos$HadSST) #Hace correlacion de pearson
corr_BOYA_HadSST
#Quien tiene mayor correlación?
corr_BOYA_ErSST$estimate
corr_BOYA_HadSST$estimate
#Para ver si es significativo
corr_BOYA_ErSST$p.value
corr_BOYA_HadSST$p.value
#Correlaciones segun el ENSO. LN es La Niña, EN es El Niño, N es Neutro
datos$anio
aniosninio<-datos$anio[datos$obs=="EN"]
aniosninio
boyaninio<-dato$BOYA[datos$obs=="EN"]
boyaninio<-datos$BOYA[datos$obs=="EN"]
boyaninio
#Correlaciones segun el ENSO. LN es La Niña, EN es El Niño, N es Neutro
aniosninio<-datos$anio[datos$obs=="EN"] #Me quiero quedar con los años niño
boyaninio<-datos$BOYA[datos$obs=="EN"] #Me quiero quedar con los datos de boya de años niño
HadSSTninio<-datos$HadSST[datos$obs=="EN"] #Me quiero quedar con los datos del modelo Had de años niño
corr_BOYA_HadSST_Ninio<-cor.test(boyaninio,HadSSTninio)
corr_BOYA_HadSST_Ninio
datos<-array(data = c(1:120), dim = c(5,6,4))
datos
#6columnas y 4 tiempos
dim(datos)
#---------- Práctica 19/09 ----------
rm(list=ls())
datos<-array(data = c(1:120), dim = c(5,6,4)) #Completa por columnas. 5 filas,
#6 columnas y 4 dimensiones
dim(datos)
datos
# Queremos hacer un promedio en los dias
promedio_dias <- apply(datos, c(1,2), mean ) #c(1,2) le
promedio_dias
dim(promedio_dias)
#-------------------------------------------------------------------------------
#Ahora en vez de tener 5 longitudes (filas), 6 latitudes (columnas) y 4 dias,
# reacomodemos para que sean 30 filas (lon*lat) y 4 columnas (dias)
datos_2<- matrix(data= datos, ncol = 4, nrow = 30)
datos_2
#Si ahora usamos la funcion rowMeans obtendriamos el promedio en los dias para cada lon-lat,
## y el resultados seria similar al que obtuvimos en promedio_dias
promedio_filas_datos2<- rowMeans(datos_2) #Media de las filas
promedio_filas_datos2
load("/home/clinux01/Descargas/datos_viento.RData")
###############################################################################
rm(list=ls())
###############################################################################
rm(list=ls())
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_viento.RData")
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_viento.RData")
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_dimensiones_viento.RData")
#Cargo mis archivos
datos<-load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_viento.RData")
datos
datos2<-load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_dimensiones_viento.RData")
datos2
###############################################################################
rm(list=ls())
#Cargo mis archivos
datos<-load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_viento.RData")
datos2<-load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_dimensiones_viento.RData")
###############################################################################
rm(list=ls())
#Cargo mis archivos
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_viento.RData")
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_dimensiones_viento.RData")
datos_viento
viento
###############################################################################
rm(list=ls())
#Cargo mis archivos
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_viento.RData")
load("/home/clinux01/Escritorio/Cande Labo Martes/Practica_3/datos_dimensiones_viento.RData")
datos_viento
viento
#Redimensiono
datos_vientoaco<- matrix(data=datos_viento, ncol = 31, nrow = 195 ) #Long(15) y
#Redimensiono
datos_vientoaco<- matrix(data=datos_viento, ncol = 30, nrow = 195 ) #Long(15) y
prom_viento<-apply(viento,c(1,2,4),mean) #Me calcula el promedio para cada long,
prom_viento
View(datos_vientoaco)
View(datos_viento)
#lat y nivel y se "olvida" de la dimens 3 (el tiempo)
dim(prom_viento)
#Seleccione el nivel de 850hPa y guardar en una matriz el promedio de
#temperatura sobre el dominio.
#Dominio de sudamerica. Region espacial q considero. promedio de todos los puntos.
#Sumar todo y dividir por la cant de puntos que tengo, Calcular media
prom_dic_850<-prom_viento[,,1]
prom_dic_850
apply(prom_dic,mean)
apply(prom_dic_850,mean)
mean(prom_dic_850)
prom_dic_200<-prom_viento[,,2]
sum(prom_dic_200)
suma<-sum(prom_dic_200)
#---------- Práctica 19/09 ----------
rm(list = ls())
n <- c(2, 3, 5)
s <- c("aa", "bb", "cc")
b <- c(TRUE, FALSE, TRUE)
df <- data.frame(n, s, b)
df
#Dataframe a partir de una matriz y un vector
rm(list = ls())
nombres <- c("Padre", "Madre", "Hijo")
m <- matrix(c(1:6),nrow=3)
v <- c(180,157,165)
df <- data.frame(familia = nombres, m, estatura=v)
df
#Otra forma de armar Dataframe
mi_df <- data.frame(
"entero" = 1:4,
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
mi_df
dim(mi_df) #Para ver las dimensiones de mi dataframe
#El largo de un data frame es igual a su número de columna
length(mi_df)
#names() nos permite ver los nombres de las columnas
names(mi_df)
#Si los vectores que usamos para construir el data frame no son del
#mismo largo, los datos no se reciclaran. Se nos devolverá un error.
data.frame(
"entero" = 1:3,
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
###############################################
#Manipulación de DF
rm(list=ls())
df <- mtcars #Base de datos de R con dataframe de autos
View(df)
nrow(dataframe) #Cantidad de filas
head(df) #Ccceder
#2. Por nombre de filas y columnas:
#Sintaxis:
#dataframe["nombre_fila", "nombre_columna"]
df["Mazda RX4", "hp"]
class(df["Mazda RX4", "hp"])
####################################################
#Ejercicio
rm(list=ls())
mi_df <- data.frame(
"entero" = 1:4,
"factor" = c("a", "b", "c", "d"),
"numero" = c(1.2, 3.4, 4.5, 5.6),
"cadena" = as.character(c("a", "b", "c", "d"))
)
mi_df
####################################################
#Ejercicio
rm(list=ls())
dfc<-data.fram("Base"=c(2,6,13,20),"Altura"=3:4)
dfc<-data.frame("Base"=c(2,6,13,20),"Altura"=3:4)
dfc
sup<-df[,1]*df[,2]
sup<-dfc[,1]*dfc[,2]
####################################################
#Ejercicio
rm(list=ls())
dfc<-data.frame("Base"=c(2,6,13,20),"Altura"=3:4,row.names=c("Parcela 1","Parcela 2","Parcela 3","Parcela 4"))
sup<-dfc[,1]*dfc[,2]
dfc
df_comb <- merge(dfc, sup)
df_comb
sup<-dfc[,1]*dfc[,2]
sup
dim(dfc)
supbien<-as.data.frame(sup)
df_comb <- merge(dfc, supbien)
df_comb
dfc$sup<-sup
dfc
factorial<-function(x) prod(1:x) #puedo escribir sin llaves porque es un solo argumento.
factorial(4)
factorial(8)
#####################
#Tengo que ingresar los valores x e y, mi función me devuelve esa raiz cuadrada
hipotenusa <- function(x, y) {
sqrt(x^2 + y^2) #acá no aparece por pantalla ni tampoco se guarda en una variable
}
#Tengo que ingresar los valores x e y, mi función es
hipotenusa <- function(x, y) {
return(sqrt(x^2 + y^2)) #el return hace que, despues de calcularlo, el resultado
#aparezca por pantalla. Aparece por pantalla pero no se le asigna a una variable
}
class(hipotenusa)
hipotenusa(2,3)
View(hipotenusa)
#############################
ff <- function(r) {
return(PI * r^2)
}
ff(2)
modulo <- function(v) {         # nombro a la funci?n con el nombre "modulo". y
# mi arguemnto es un vector (v)
s <- 0                        # inicializo en 0 a la suma de los cuadrados
for (e_v in v) {              # me desplazo por los elementos del vector. e_v
# es un contador q va yendo por los elementos del vector
s <- s + e_v^2              # incremeto la suma de los cuadrados
}
sqrt(s)                     # calculo la raiz cuadrado y ese es el resultado
}
vv <- c(-2, 3, 4, -5)
### Evaluamos la funcion
modulo(vv)
###############################################
modulosimple<-funcion (v) {sqrt(sum(v**2))}
###############################################
modulosimple<-funcion (v) {sqrt(sum(v^2))}
###############################################
modulosimple<-funcion (v) {
################################################
#Vamos al ejemplo 9
# Creamos una función que calcule el valor medio de un vector
promedio <- function(v) {
suma <- 0            # inicializo la suma en cero
n <- 0               # voy a contar los elementos del vector
for (e_v in v) {
suma <- suma + e_v      # sumo cada elemento del vector
n <- n+1                # voy contando los elementos
}
#(calculo <- suma/n) # Se calcula e imprime el promedio
return(suma/n)
}
################################################
#Vamos al ejemplo 9
# Creamos una función que calcule el valor medio de un vector
promedio <- function(v) {
suma <- 0            # inicializo la suma en cero
n <- 0               # voy a contar los elementos del vector
for (e_v in v) {
suma <- suma + e_v      # sumo cada elemento del vector
n <- n+1                # voy contando los elementos
}
(calculo <- suma/n) # Se calcula e imprime el promedio
return(suma/n)
}
################################################
#Vamos al ejemplo 9
#Pedirle a cami
######################
ejem.fun <- function(x, y, label = "nombre de variable"){ #Fijo el nombre de la variable
plot(x, y, xlab = label) }
ejem.fun(1:5,c(2,4,6,8,10))
################################################
#Vamos al ejemplo 9
#Pedirle a cami
######################
ejem.fun <- function(x, y, label = "la x"){ #En Label fijo el nombre de la variable
plot(x, y, xlab = label) } #en el eje x pone el nombre que defini en label
ejem.fun(1:5,c(2,4,6,8,10))
ejem.fun.2<-function(x){ #Acá el argumento es x solo
y<-x^2 #Aca me genero los y
plot(x, y) }
ejem.fun.2
ejem.fun.2
ejem.fun.2<-function(x){ #Acá el argumento es x solo
y<-x^2 #Aca me genero los y
plot(x, y) }
ejem.fun.2(1:5,c(2,4,6,8,10))
ejem.fun.2(1:5)
grande<-function(x,y){
y.g<-y>x
x[y.g]<-y[y.g]
x
}
grande(1:5, c(1,6,2,7,3))
View(grande)
grande<-function(x,y){
y.g<-y>x #Aca guarda un vector de True y False
x[y.g]<-y[y.g]
x
}
############################
#Funciones con avisos
myplot <- function(x,y) {
if(missing(y)) { #Si es que no le ponen valores a la y hace esto
y <- x
x <- 1:length(y)
}
plot(x,y)
}
myplot(1:20,11:30)
myplot(12:20)
myplot(1:20,11:30)
myplot(12:20)
############################
grande<-function(x,y=0*x){	#Funcion arreglada con avisos
if (missing(y)) warning("Estamos comparando con 0")
y.g<-y>x
x[y.g]<-y[y.g]
x
}
grande(-3:3)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
#Genero funciones
#Convierto de knts a m/s la velocidad del viento
nudos_a_ms <- function(viento) { #function me genera la función, viento es el
#argumento
ms <- viento * 0.5144          #la cuenta
return(ms)                     #me la devulve
}
#clase practica 26/09
rm(list=ls())
#Genero funciones
#Convierto de knts a m/s la velocidad del viento
nudos_a_ms <- function(viento) { #function me genera la función, viento es el
#argumento
ms <- viento * 0.5144          #la cuenta
return(ms)                     #me la devulve
}
nudos_a_ms(viento = 15)
#funciones con un df
datos_viento <- data.frame(hora = seq(0, 9),
viento = c(21.58, 18.08, 7.19, 7.19, 7.19, 7.19, 7.19,
3.69, 3.69, 7.19))
head(datos_viento)
#Si quiero que la función primero revise a ver si es numerico
nudos_a_ms <- function(viento) {
if (!is.numeric(viento)) stop("viento no es numérico")
# Para R >= 4.0
# stopifnot("No es numerico" = is.numeric(viento))
# ¿Es de tipo numérico?
ms <- viento * 0.5144
return()
}
#Genero funciones
#Convierto de knts a m/s la velocidad del viento
nudos_a_ms <- function(viento) { #function me genera la función, viento es el
#argumento
ms <- viento * 0.5144          #la cuenta
return(ms)
}
#Si quiero que la función primero revise a ver si es numerico
nudos_a_ms <- function(viento) {
if (!is.numeric(viento)) stop("viento no es numérico")
# Para R >= 4.0
# stopifnot("No es numerico" = is.numeric(viento))
# ¿Es de tipo numérico?
ms <- viento * 0.5144
return()
}
#clase practica 26/09
rm(list=ls())
#funciones con un df
datos_viento <- data.frame(hora = seq(0, 9),
viento = c(21.58, 18.08, 7.19, 7.19, 7.19, 7.19, 7.19,
3.69, 3.69, 7.19))
head(datos_viento)
datos_viento$viento_ms <- nudos_a_ms(datos_viento$viento)
#clase practica 26/09
rm(list=ls())
#Genero funciones
#Convierto de knts a m/s la velocidad del viento
nudos_a_ms <- function(viento) { #function me genera la función, viento es el
#argumento
ms <- viento * 0.5144          #la cuenta
return(ms)
}
nudos_a_ms(viento = 15)
ms_a_nudos<- function(viento) {
nudos<-viento * 1.944
return(ms)
}
#Si quiero que la función primero revise a ver si es numerico
nudos_a_ms <- function(viento) {
if (!is.numeric(viento)) stop("viento no es numérico")
# Para R >= 4.0
# stopifnot("No es numerico" = is.numeric(viento))
# ¿Es de tipo numérico?
ms <- viento * 0.5144
return()
}
#funciones con un df
datos_viento <- data.frame(hora = seq(0, 9),
viento = c(21.58, 18.08, 7.19, 7.19, 7.19, 7.19, 7.19,
3.69, 3.69, 7.19))
head(datos_viento)
datos_viento$viento_ms <- nudos_a_ms(datos_viento$viento)
head(datos_viento)
class(datos_viento$viento_ms)
class(datos_viento$viento_ms)
datos_viento$viento_ms <- nudos_a_ms(datos_viento$viento)
head(datos_viento)
class(datos_viento$viento_ms)
class(datos_viento$viento)
print(datos_viento$viento)
#Argumentos por defecto
nudos_a_ms <- function(viento, conversion = 0.51) { #Puedo definir el valor
#de conversion y la func anda
if (!is.numeric(viento)) stop("viento no es numérico")
ms <- viento * conversion
return(ms)
}
nudos_a_ms(15) # usa la constante por defecto
nudos_a_ms(15, conversion = 0.514444) #puedo cambiar el valor de la conversión
formals(nudos_a_ms)
##############################################
#Ejercicio en grupos
convertir_viento<-function(viento) {
unidad<-readline("Ingrese en que unidad va ingresar:m/s o knts")
if(unidad=="m/s"){
ms <- viento * conversion
} else if (unidad=="knts") {
knts<-viento * 1.944
}
}
##############################################
#Ejercicio en grupos
convertir_viento<-function(viento) {
if(unidad=="m/s"){
ms <- viento * conversion
} else if (unidad=="knts") {
knts<-viento * 1.944
}
}
unidad<-readline("Ingrese en que unidad va ingresar:m/s o knts")
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
#Calculo del promedio
prom<-temperatura/agosto #divido por 31 dias
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/.active-rstudio-document", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
#Listas
rm(list=ls())
#Ejemplo
familia <- list("Maria","Juana", 10, c("Hugo", "Paula"),
c(8,7)) #genero la lista familia q tiene 5 elementos
familia
familia <- list(madre = "Maria", tia = "Juana",
casados = 10,hijos = c("Hugo","Paula"),
edades = c(8, 6))
familia
#lista$nombre_nueva_componente <-nueva_componente  o
familia$mascotas <- "Gato"
familia$mascotas
familia
#lista[numero_elemento] <- nueva_componente
familia[7] <- "Auto"
familia
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
################################################
#Ejercicio
alumnos<-list(Nombres=c("Cami","Maite","Cande","Eli"),edades=c(20,20,21,2))
alumnos
################################################
#Ejercicio
alumnas<-list(Nombres=c("Cami","Maite","Cande","Eli"),edades=c(20,20,21,2))
alumnas
mean(alumnas$edades)
################################################
#Ejercicio
alumnas<-list(Nombres=c("Cami","Maite","Cande","Eli"),edades=c(20,20,21,23))
alumnas
mean(alumnas$edades)
################################################
#Ejercicio
alumnas<-list(Nombres=c("Cami","Maite","Cande","Eli"),edades=c(22,20,21,23))
alumnas
mean(alumnas$edades)
promedio<-mean(alumnas$edades) #calculo del promedio
class
################################################
#Ejercicio
alumnas<-list(Nombres=c("Cami","Maite","Cande","Eli"),edades=c(22,20,21,23))
alumnas
alumnas$promedio <- mean(alumnas$edades)
alumnas
lapply(alumnas,length(x))
lapply(alumnas,length(alumnas))
lapply(alumnas,length(alumnas$Nombres,alumnas$edades,alumnas$promedio))
source("~/Escritorio/Cande Labo Martes/Practica_2/Parcialito_RussoFarina_corregido.R", echo=TRUE)
lapply(alumnas,function(x) length(x))
################################################
#Ejercicio
alumnas<-list(Nombres=c("Cami","Maite","Cande","Eli"),edades=c(22,20,21,23))
alumnas
alumnas$promedio <- mean(alumnas$edades) #calculo del promedio y agregar a la lista
alumnas
lapply(alumnas,function(x) length(x))
